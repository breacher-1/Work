drop table if exists cs_upsell_table;
create temp table cs_upsell_table(
  s_no INT PRIMARY KEY,
  recommendation_assured_code VARCHAR(255),
  recommendation_type VARCHAR(255),
  recommendation_department_name VARCHAR(255),
  recommendation_lob VARCHAR(255)
);


select * from cs_upsell_table;




-- TABLE CREATION AND ACCESSING FROM SUBMISSION_DATAMART




DROP TABLE IF EXISTS penultimate_assured_code;

CREATE TABLE penultimate_assured_code (
    s_no INT PRIMARY KEY,
    assured_code VARCHAR(255)
);


INSERT INTO penultimate_assured_code (s_no, assured_code)
SELECT
    ROW_NUMBER() OVER () AS s_no,
    assured_code
FROM (
    SELECT assured_code
    FROM public.submission_datamart
    WHERE policy_status in ('Policy Bound', 'Cancelled') AND policy_source = 'DRAGON'
    LIMIT 1000
);

DROP TABLE IF EXISTS penultimate_department_name;

CREATE TABLE penultimate_department_name (
    s_no INT PRIMARY KEY,
    product_department_name VARCHAR(255)
);

INSERT INTO penultimate_department_name (s_no, product_department_name)
SELECT
    ROW_NUMBER() OVER () AS s_no,
    product_department_name
FROM (
    SELECT product_department_name
    FROM public.submission_datamart
    LIMIT 1000
);


DROP TABLE IF EXISTS penultimate_lob_name;

CREATE TABLE penultimate_lob_name (
    s_no INT PRIMARY KEY,
    lob VARCHAR(255)
);

INSERT INTO penultimate_lob_name (s_no, lob)
SELECT
    ROW_NUMBER() OVER () AS s_no,
    lob
FROM (
    SELECT lob
    FROM public.submission_datamart
    LIMIT 1000
) AS subquery;



SELECT * FROM penultimate_assured_code;
SELECT * FROM penultimate_department_name;
SELECT * FROM penultimate_lob_name;


INSERT INTO cs_upsell_table (s_no)
SELECT s_no
FROM penultimate_assured_code;

select * from cs_upsell_table;

-- INSERTION TO MAIN TABLE



-- Update recommendation_type column
UPDATE cs_upsell_table
SET recommendation_type = 'Upsell';

-- Update assured_code column using JOIN
UPDATE cs_upsell_table
SET recommendation_assured_code = penultimate_assured_code.assured_code
FROM penultimate_assured_code
WHERE cs_upsell_table.s_no = penultimate_assured_code.s_no;

-- Update recommendation_department column using JOIN
UPDATE cs_upsell_table
SET recommendation_department_name = penultimate_department_name.product_department_name
FROM penultimate_department_name
WHERE cs_upsell_table.s_no = penultimate_department_name.s_no;

-- Update recommendation_lob column using JOIN
UPDATE cs_upsell_table
SET recommendation_lob = penultimate_lob_name.lob
FROM penultimate_lob_name
WHERE cs_upsell_table.s_no = penultimate_lob_name.s_no;

-- Fetch all records from cs_upsell_table
SELECT * FROM cs_upsell_table order by s_no;

drop table if exists cs_crosssell_table;
create temp table cs_crosssell_table(
  s_no INT PRIMARY KEY,
  recommendation_assured_code VARCHAR(255),
  recommendation_type VARCHAR(255),
  recommendation_department_name VARCHAR(255),
  recommendation_lob VARCHAR(255)
);


select * from cs_crosssell_table;




-- TABLE CREATION AND ACCESSING FROM SUBMISSION_DATAMART




DROP TABLE IF EXISTS penultimate_assured_code;

CREATE TABLE penultimate_assured_code (
    s_no INT PRIMARY KEY,
    assured_code VARCHAR(255)
);


INSERT INTO penultimate_assured_code (s_no, assured_code)
SELECT
    ROW_NUMBER() OVER () AS s_no,
    assured_code
FROM (
    SELECT assured_code
    FROM public.submission_datamart
    WHERE policy_status in ('Policy Bound', 'Cancelled') AND policy_source = 'DRAGON'
    LIMIT 5000
);

DROP TABLE IF EXISTS penultimate_department_name;

CREATE TABLE penultimate_department_name (
    s_no INT PRIMARY KEY,
    product_department_name VARCHAR(255)
);

INSERT INTO penultimate_department_name (s_no, product_department_name)
SELECT
    ROW_NUMBER() OVER () AS s_no,
    product_department_name
FROM (
    SELECT product_department_name
    FROM public.submission_datamart
    LIMIT 5000
);


DROP TABLE IF EXISTS penultimate_lob_name;

CREATE TABLE penultimate_lob_name (
    s_no INT PRIMARY KEY,
    lob VARCHAR(255)
);

INSERT INTO penultimate_lob_name (s_no, lob)
SELECT
    ROW_NUMBER() OVER () AS s_no,
    lob
FROM (
    SELECT lob
    FROM public.submission_datamart
    LIMIT 5000
) AS subquery;



SELECT * FROM penultimate_assured_code;
SELECT * FROM penultimate_department_name;
SELECT * FROM penultimate_lob_name;


INSERT INTO cs_crosssell_table (s_no)
SELECT s_no
FROM penultimate_assured_code;

select * from cs_crosssell_table;

-- INSERTION TO MAIN TABLE



-- Update recommendation_type column
UPDATE cs_crosssell_table
SET recommendation_type = 'Crosssell';

-- Update assured_code column using JOIN
UPDATE cs_crosssell_table
SET recommendation_assured_code = penultimate_assured_code.assured_code
FROM penultimate_assured_code
WHERE cs_crosssell_table.s_no = penultimate_assured_code.s_no;

-- Update recommendation_department column using JOIN
UPDATE cs_crosssell_table
SET recommendation_department_name = penultimate_department_name.product_department_name
FROM penultimate_department_name
WHERE cs_crosssell_table.s_no = penultimate_department_name.s_no;

-- Update recommendation_lob column using JOIN
UPDATE cs_crosssell_table
SET recommendation_lob = penultimate_lob_name.lob
FROM penultimate_lob_name
WHERE cs_crosssell_table.s_no = penultimate_lob_name.s_no;

-- Fetch all records from cs_crosssell_table
drop table if exists cs_crosssell_table;
create temp table cs_crosssell_table(
  s_no INT PRIMARY KEY,
  recommendation_assured_code VARCHAR(255),
  recommendation_type VARCHAR(255),
  recommendation_department_name VARCHAR(255),
  recommendation_lob VARCHAR(255)
);


select * from cs_crosssell_table;




-- TABLE CREATION AND ACCESSING FROM SUBMISSION_DATAMART




DROP TABLE IF EXISTS penultimate_assured_code;

CREATE TABLE penultimate_assured_code (
    s_no INT PRIMARY KEY,
    assured_code VARCHAR(255)
);


INSERT INTO penultimate_assured_code (s_no, assured_code)
SELECT
    ROW_NUMBER() OVER () AS s_no,
    assured_code
FROM (
    SELECT assured_code
    FROM public.submission_datamart
    WHERE policy_status in ('Policy Bound', 'Cancelled') AND policy_source = 'DRAGON'
    LIMIT 5000
);

DROP TABLE IF EXISTS penultimate_department_name;

CREATE TABLE penultimate_department_name (
    s_no INT PRIMARY KEY,
    product_department_name VARCHAR(255)
);

INSERT INTO penultimate_department_name (s_no, product_department_name)
SELECT
    ROW_NUMBER() OVER () AS s_no,
    product_department_name
FROM (
    SELECT product_department_name
    FROM public.submission_datamart
    LIMIT 5000
);


DROP TABLE IF EXISTS penultimate_lob_name;

CREATE TABLE penultimate_lob_name (
    s_no INT PRIMARY KEY,
    lob VARCHAR(255)
);

INSERT INTO penultimate_lob_name (s_no, lob)
SELECT
    ROW_NUMBER() OVER () AS s_no,
    lob
FROM (
    SELECT lob
    FROM public.submission_datamart
    LIMIT 5000
) AS subquery;



SELECT * FROM penultimate_assured_code;
SELECT * FROM penultimate_department_name;
SELECT * FROM penultimate_lob_name;


INSERT INTO cs_crosssell_table (s_no)
SELECT s_no
FROM penultimate_assured_code;

select * from cs_crosssell_table;

-- INSERTION TO MAIN TABLE



-- Update recommendation_type column
UPDATE cs_crosssell_table
SET recommendation_type = 'Crosssell';

-- Update assured_code column using JOIN
UPDATE cs_crosssell_table
SET recommendation_assured_code = penultimate_assured_code.assured_code
FROM penultimate_assured_code
WHERE cs_crosssell_table.s_no = penultimate_assured_code.s_no;

-- Update recommendation_department column using JOIN
UPDATE cs_crosssell_table
SET recommendation_department_name = penultimate_department_name.product_department_name
FROM penultimate_department_name
WHERE cs_crosssell_table.s_no = penultimate_department_name.s_no;

-- Update recommendation_lob column using JOIN
UPDATE cs_crosssell_table
SET recommendation_lob = penultimate_lob_name.lob
FROM penultimate_lob_name
WHERE cs_crosssell_table.s_no = penultimate_lob_name.s_no;

-- Fetch all records from cs_crosssell_table
SELECT * FROM cs_upsell_table order by s_no;
SELECT * FROM cs_crosssell_table order by s_no;


CREATE TABLE final AS 
SELECT * FROM cs_upsell_table
UNION ALL
SELECT * FROM cs_crosssell_table;

select count(*) from cs_upsell_table;
select count(*) from cs_crosssell_table;

select * from final order by s_no;
select count(*) from final;

















global end
end = "\n"

print("hellowjkna", end)
print(a.bit_length())